generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Participant: Links users to sessions, indicating who joined which session.
model Participant {
  id        Int      @id @default(autoincrement())
  sessionId Int
  userId    Int
  joinedAt  DateTime @default(now())
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

// Session: Represents a planning poker session, linked to the user who created it.
model Session {
  id           Int           @id @default(autoincrement())
  sessionName  String
  createdBy    Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  participants Participant[]
  stories      Story[]
}

// Story: Contains the stories or tasks to be estimated within a session.
model Story {
  id          Int      @id @default(autoincrement())
  sessionId   Int
  title       String
  description String?
  createdAt   DateTime @default(now())
  session     Session  @relation(fields: [sessionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  votes       Vote[]
}

// User: Represents users with unique usernames.
model User {
  id          Int           @id @default(autoincrement())
  username    String        @unique @db.VarChar(100)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  sessions    Session[]
  votes       Vote[]
  Participant Participant[]
}

// Vote: Records the votes for each story by each participant.
model Vote {
  id        Int      @id @default(autoincrement())
  storyId   Int
  userId    Int
  voteValue Int
  votedAt   DateTime @default(now())
  story     Story    @relation(fields: [storyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
